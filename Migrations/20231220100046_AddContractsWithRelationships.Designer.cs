// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rent_a_car_mvc.Data;

#nullable disable

namespace rent_a_car_mvc.Migrations
{
    [DbContext(typeof(RentACarContext))]
    [Migration("20231220100046_AddContractsWithRelationships")]
    partial class AddContractsWithRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("rent_a_car_mvc.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Make = "Aston Martin",
                            Model = "Vanquish",
                            RegistrationPlate = "AM0-V-001"
                        },
                        new
                        {
                            Id = 2,
                            Make = "Mercedes Benz",
                            Model = "S Class",
                            RegistrationPlate = "MB0-S-001"
                        },
                        new
                        {
                            Id = 3,
                            Make = "Rolls Royce",
                            Model = "Wraith",
                            RegistrationPlate = "RR0-W-001"
                        });
                });

            modelBuilder.Entity("rent_a_car_mvc.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("RenterId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Deposit = 4000.0,
                            DriverId = 1,
                            EndDateTime = new DateTime(2023, 12, 25, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndLocation = "Ankara Airport",
                            RenterId = 1,
                            StartDateTime = new DateTime(2023, 12, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocation = "Ankara Airport",
                            TotalAmount = 60000.0
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            Deposit = 8000.0,
                            DriverId = 1,
                            EndDateTime = new DateTime(2023, 12, 25, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndLocation = "Ankara Airport",
                            RenterId = 2,
                            StartDateTime = new DateTime(2023, 12, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocation = "Ankara Airport",
                            TotalAmount = 50000.0
                        },
                        new
                        {
                            Id = 3,
                            CarId = 2,
                            Deposit = 8000.0,
                            DriverId = 2,
                            EndDateTime = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndLocation = "Ankara Airport",
                            RenterId = 2,
                            StartDateTime = new DateTime(2023, 12, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocation = "Ankara Airport",
                            TotalAmount = 50000.0
                        });
                });

            modelBuilder.Entity("rent_a_car_mvc.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2002, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seferibrahim2@gmail.com",
                            Name = "Ibrahim Sefer",
                            Telephone = "+905363344840"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2001, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johnsmith@gmail.com",
                            Name = "John Smith",
                            Telephone = "+905361123440"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(2000, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "markmarkovich@gmail.com",
                            Name = "Mark Markovich",
                            Telephone = "+905369977660"
                        });
                });

            modelBuilder.Entity("rent_a_car_mvc.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("RenterId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Deposit = 4000.0,
                            EndDateTime = new DateTime(2023, 12, 25, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndLocation = "Ankara Airport",
                            FlightNumber = "TK1002",
                            RenterId = 1,
                            StartDateTime = new DateTime(2023, 12, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocation = "Ankara Airport",
                            TotalAmount = 10000.0
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            Deposit = 8000.0,
                            EndDateTime = new DateTime(2023, 12, 25, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndLocation = "Ankara Airport",
                            FlightNumber = "TK1005",
                            RenterId = 2,
                            StartDateTime = new DateTime(2023, 12, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocation = "Ankara Airport",
                            TotalAmount = 20000.0
                        },
                        new
                        {
                            Id = 3,
                            CarId = 2,
                            Deposit = 8000.0,
                            EndDateTime = new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndLocation = "Ankara Airport",
                            FlightNumber = "TK1008",
                            RenterId = 2,
                            StartDateTime = new DateTime(2023, 12, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocation = "Ankara Airport",
                            TotalAmount = 30000.0
                        });
                });

            modelBuilder.Entity("rent_a_car_mvc.Models.Contract", b =>
                {
                    b.HasOne("rent_a_car_mvc.Models.Car", "Car")
                        .WithMany("Contracts")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rent_a_car_mvc.Models.Customer", null)
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("rent_a_car_mvc.Models.Customer", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rent_a_car_mvc.Models.Customer", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Driver");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("rent_a_car_mvc.Models.Reservation", b =>
                {
                    b.HasOne("rent_a_car_mvc.Models.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId");

                    b.HasOne("rent_a_car_mvc.Models.Customer", "Renter")
                        .WithMany("Reservations")
                        .HasForeignKey("RenterId");

                    b.Navigation("Car");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("rent_a_car_mvc.Models.Car", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("rent_a_car_mvc.Models.Customer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
